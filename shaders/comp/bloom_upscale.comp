#version 460 core

#define GROUP_SIZE 8
#define GROUP_THREAD_COUNT (GROUP_SIZE * GROUP_SIZE)
#define FILTER_SIZE 3
#define FILTER_RADIUS (FILTER_SIZE / 2)
#define TILE_SIZE (GROUP_SIZE + 2 * FILTER_RADIUS)
#define TILE_PIXEL_COUNT (TILE_SIZE * TILE_SIZE)

// compute
layout(local_size_x = GROUP_SIZE, local_size_y = GROUP_SIZE) in;

// textures
layout(binding = 0) uniform sampler2D texInput;

// images
layout(rgba16f, binding = 0) uniform image2D imgOutput;

// uniform
layout(location = 0) uniform float uBloomIntensity;
layout(location = 1) uniform vec2 uTexelSize;
layout(location = 2) uniform int uMipLevel;

// shared
shared float sR[TILE_PIXEL_COUNT];
shared float sG[TILE_PIXEL_COUNT];
shared float sB[TILE_PIXEL_COUNT];

void StoreLds(int idx, vec4 c) {
  sR[idx] = c.r;
  sG[idx] = c.g;
  sB[idx] = c.b;
}

vec4 LoadLds(uint idx) { return vec4(sR[idx], sG[idx], sB[idx], 1.0); }

void main() {
  ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
  vec2 base_index = ivec2(gl_WorkGroupID.xy) * GROUP_SIZE - FILTER_RADIUS;

  // the first (TILE_PIXEL_COUNT - GROUP_THREAD_COUNT) threads load at most 2
  // texel values
  for (int i = int(gl_LocalInvocationIndex); i < TILE_PIXEL_COUNT;
       i += GROUP_THREAD_COUNT) {
    vec2 uv = (vec2(base_index) + vec2(0.5)) * uTexelSize;
    vec2 uv_offset = vec2(i % TILE_SIZE, i / TILE_SIZE) * uTexelSize;

    vec4 color = textureLod(texInput, uv + uv_offset, uMipLevel);
    StoreLds(i, color);
  }

  memoryBarrierShared();
  barrier();

  // center texel
  uint sm_idx = (gl_LocalInvocationID.x + FILTER_RADIUS) +
                (gl_LocalInvocationID.y + FILTER_RADIUS) * TILE_SIZE;

  // based on [Jimenez14] http://goo.gl/eomGso
  vec4 s;
  s = LoadLds(sm_idx - TILE_SIZE - 1);
  s += LoadLds(sm_idx - TILE_SIZE) * 2.0;
  s += LoadLds(sm_idx - TILE_SIZE + 1);

  s += LoadLds(sm_idx - 1) * 2.0;
  s += LoadLds(sm_idx) * 4.0;
  s += LoadLds(sm_idx + 1) * 2.0;

  s += LoadLds(sm_idx + TILE_SIZE - 1);
  s += LoadLds(sm_idx + TILE_SIZE) * 2.0;
  s += LoadLds(sm_idx + TILE_SIZE + 1);

  vec4 bloom = s * (1.0 / 16.0);

  vec4 out_pixel = imageLoad(imgOutput, pixel_coords);
  out_pixel += bloom * uBloomIntensity;

  // from first mipmap to base level
  if (uMipLevel == 1) {
    out_pixel += bloom * uBloomIntensity;
  }

  imageStore(imgOutput, pixel_coords, out_pixel);
}